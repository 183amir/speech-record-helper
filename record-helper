#!/usr/bin/env python
import argparse
from datetime import datetime

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

utcnow = datetime.utcnow
w = None


def destroy_New_Toplevel_1():
    global w
    w.destroy()
    w = None


class New_Toplevel_1:

    def __init__(self, master=None):
        # _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        # _fgcolor = '#000000'  # X11 color: 'black'
        # _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        # _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        # _ana2color = '#d9d9d9'  # X11 color: 'gray85'
        master.configure(highlightcolor="black")

        self.Label1 = Label(master)
        self.Label1.place(relx=0.05, rely=0.04, height=248, width=536)
        # self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Label''')

        self.ButtonR = Button(master)
        self.ButtonR.place(relx=0.38, rely=0.76, height=26, width=68)
        # self.ButtonR.configure(activebackground="#d9d9d9")
        self.ButtonR.configure(text='''Record''')

        self.ButtonP = Button(master)
        self.ButtonP.place(relx=0.23, rely=0.76, height=26, width=76)
        # self.ButtonP.configure(activebackground="#d9d9d9")
        self.ButtonP.configure(text='''Previous''')

        self.ButtonN = Button(master)
        self.ButtonN.place(relx=0.62, rely=0.76, height=26, width=54)
        # self.ButtonN.configure(activebackground="#d9d9d9")
        self.ButtonN.configure(text='''Next''')

        self.ButtonS = Button(master)
        self.ButtonS.place(relx=0.5, rely=0.76, height=26, width=54)
        # self.ButtonS.configure(activebackground="#d9d9d9")
        self.ButtonS.configure(text='''Stop''')

        self.ButtonSave = Button(master)
        self.ButtonSave.place(relx=0.62, rely=0.87, height=26, width=55)
        # self.ButtonSave.configure(activebackground="#d9d9d9")
        self.ButtonSave.configure(text='''Save''')


class SpeechRecorderApp(object):

    """docstring for SpeechRecorderApp"""

    def __init__(self, prompts):
        super(SpeechRecorderApp, self).__init__()
        self.prompts = prompts
        self.prompt_idx = 0
        self.timer = Timer()
        self.last_time = 0
        self.label = [''] * len(self.prompts)
        self.label_stamp = str(utcnow())
        global val, w, root, top_level
        root.title('Speech Recorder')
        geom = "600x450+430+211"
        root.geometry(geom)
        self.win = New_Toplevel_1(root)
        self.connect_signals()
        self.update_ui()

    def connect_signals(self):
        self.win.ButtonP['command'] = self.prev_pressed
        self.win.ButtonN['command'] = self.next_pressed
        self.win.ButtonR['command'] = self.record_pressed
        self.win.ButtonS['command'] = self.stop_pressed
        self.win.ButtonSave['command'] = self.write_label

    def update_ui(self):
        self.win.Label1.configure(text=self.prompts[self.prompt_idx][1])

    def write_label(self):
        if self.label[self.prompt_idx] == '':
            self.stop_pressed()
        with open('label_{}.lab'.format(self.label_stamp), 'w') as f:
            f.writelines(self.label)

    def prev_pressed(self):
        if self.label[self.prompt_idx] == '':
            self.stop_pressed()
        self.prompt_idx += -1
        if self.prompt_idx < 0:
            self.prompt_idx = 0
        self.update_ui()
        self.record_pressed()

    def next_pressed(self):
        if self.label[self.prompt_idx] == '':
            self.stop_pressed()
        self.write_label()
        self.prompt_idx += 1
        if self.prompt_idx >= len(self.prompts):
            self.prompt_idx = len(self.prompts) - 1
        self.update_ui()
        self.record_pressed()

    def record_pressed(self):
        self.last_time = self.timer.now()

    def stop_pressed(self):
        self.label[self.prompt_idx] = \
            ' '.join([str(self.last_time).rjust(10),
                      str(self.timer.now()).rjust(10), ' ']) + \
            ' '.join(self.prompts[self.prompt_idx])


class Timer(object):

    """docstring for Timer"""

    def __init__(self):
        super(Timer, self).__init__()
        self.start = utcnow()

    def now(self):
        t = utcnow() - self.start
        return int(t.total_seconds() * 10 ** 7)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Facilates speech recording.')
    parser.add_argument('prompts', metavar='prompts file path', type=str,
                        help='''path to the prompts file.
it should contain the utt id at first and the rest should be the prompt
sepearated by white space.''')
    args = parser.parse_args()
    with open(args.prompts) as f:
        lines = f.readlines()
    prompts = [l.split(None, 1) for l in lines]
    root = Tk()
    app = SpeechRecorderApp(prompts)
    root.mainloop()
